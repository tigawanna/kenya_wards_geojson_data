export {};
// Demo script to show the actual SQL output\nimport { sql } from 'drizzle-orm';\nimport { kenyaWards } from '../schema.js';\nimport { createQueryBuilder, spatialFunctions } from './index.js';\n\nconsole.log('=== QueryBuilder SQL Output Demo ===\\n');\n\n// Helper function to try to extract SQL string in different ways\nfunction getSQLString(query: any): string {\n  try {\n    // Try different approaches to get the SQL string\n    \n    // Method 1: Try calling toSQL() and accessing sql property\n    if (query && typeof query.toSQL === 'function') {\n      const sqlObj = query.toSQL();\n      if (sqlObj && typeof sqlObj === 'object' && 'sql' in sqlObj) {\n        return (sqlObj as { sql: string }).sql;\n      }\n      if (sqlObj && typeof sqlObj.toString === 'function') {\n        return sqlObj.toString();\n      }\n    }\n    \n    // Method 2: Try calling toString() directly\n    if (query && typeof query.toString === 'function') {\n      return query.toString();\n    }\n    \n    // Method 3: Return JSON representation as fallback\n    return JSON.stringify(query);\n  } catch (error) {\n    return `[Error extracting SQL: ${(error as Error).message}]`;\n  }\n}\n\n// Demo 1: Basic SELECT query\nconsole.log('1. Basic SELECT query:');\nconst basicQuery = createQueryBuilder(kenyaWards)\n  .select({\n    id: sql`id`,\n    ward: sql`ward`,\n    county: sql`county`\n  });\n\nconsole.log('Query object:', basicQuery);\nconsole.log('SQL String:', getSQLString(basicQuery));\nconsole.log('\\n---\\n');\n\n// Demo 2: SELECT with WHERE conditions\nconsole.log('2. SELECT with WHERE conditions:');\nconst whereQuery = createQueryBuilder(kenyaWards)\n  .select({\n    id: sql`id`,\n    ward: sql`ward`,\n    county: sql`county`\n  })\n  .whereEquals('county', 'Nairobi')\n  .whereLike('ward', '%Central%');\n\nconsole.log('Query object:', whereQuery);\nconsole.log('SQL String:', getSQLString(whereQuery));\nconsole.log('\\n---\\n');\n\n// Demo 3: Spatial query\nconsole.log('3. Spatial query:');\nconst point = spatialFunctions.makePoint(36.817223, -1.286389);\nconst spatialQuery = createQueryBuilder(kenyaWards)\n  .select({\n    id: sql`id`,\n    ward: sql`ward`,\n    county: sql`county`,\n    geometry: spatialFunctions.asGeoJSON(sql`geom`)\n  })\n  .whereContains('geom', point)\n  .orderBy('ward', 'asc')\n  .limit(5);\n\nconsole.log('Query object:', spatialQuery);\nconsole.log('SQL String:', getSQLString(spatialQuery));\nconsole.log('\\n---\\n');\n\n// Demo 4: Complex spatial query\nconsole.log('4. Complex spatial query:');\nconst complexQuery = createQueryBuilder(kenyaWards)\n  .select({\n    id: sql`id`,\n    wardCode: sql`ward_code`,\n    ward: sql`ward`,\n    county: sql`county`,\n    distance: spatialFunctions.distance(sql`geom`, point),\n    geometry: spatialFunctions.asGeoJSON(sql`geom`)\n  })\n  .whereContains('geom', point)\n  .orderByDistance('geom', point, 'asc')\n  .limit(10);\n\nconsole.log('Query object:', complexQuery);\nconsole.log('SQL String:', getSQLString(complexQuery));\nconsole.log('\\n---\\n');\n\n// Demo 5: Search query\nconsole.log('5. Search query:');\nconst searchQuery = createQueryBuilder(kenyaWards)\n  .select({\n    id: sql`id`,\n    wardCode: sql`ward_code`,\n    ward: sql`ward`,\n    county: sql`county`,\n    constituency: sql`constituency`\n  })\n  .whereLike('ward', '%Nairobi%')\n  .orderBy('ward', 'asc');\n\nconsole.log('Query object:', searchQuery);\nconsole.log('SQL String:', getSQLString(searchQuery));\nconsole.log('\\n---\\n');\n\nconsole.log('=== End of Demo ===');
